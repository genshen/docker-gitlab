
# This Dockerfile is generated by all-in-one script.
# This Dockerfile this a collection of all other splited Dockerfiles, but except gitlab-pages docker image.
# You can use this Dockerfile only to build gitlab-ce docker image.

################################
## image of gitlab-base-builder
################################
# https://github.com/docker-library/ruby/issues/228 / https://bugs.ruby-lang.org/issues/14754 3.8 not work for compiling ruby currently.
FROM debian:buster-20200908-slim AS gitlab-base-packages-builder
# docker build --rm -t gitlab-builder  .
# add denpendency libs and c/c++ compilers, git, ruby, go, node here.
LABEL maintainer="genshenchu@gmail.com" \
      description="base image for build gitlab images."

ARG RUBY_DOWNLOAD_RUL="https://cache.ruby-lang.org/pub/ruby/2.7/ruby-2.7.2.tar.gz"
ARG GOLANG_DOWNLOAD_URL="https://dl.google.com/go/go1.15.3.linux-amd64.tar.gz"
ARG NODEJS_DOWNLOAD_URL="https://nodejs.org/dist/v12.19.0/node-v12.19.0-linux-x64.tar.xz"
ARG LIBPCRE_DOWNLOAD_URL="https://ftp.pcre.org/pub/pcre/pcre2-10.35.tar.gz"
ARG GIT_DOWNLOAD_URL="https://www.kernel.org/pub/software/scm/git/git-2.28.0.tar.gz"

# https://docs.gitlab.com/ee/install/installation.html#1-packages-dependencies
# note: libre2-dev comes from community; openssl is replace by libressl-dev.
# libexpat1-dev gettext libz-dev is used for git building.
# install ca-certificates apt-transport-https packages for downloading from https website(e.g. golang, nodejs).
RUN apt-get clean && apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y ca-certificates apt-transport-https \
#    && sed -i 's#http://deb.debian.org#https://mirrors.ustc.edu.cn#g' /etc/apt/sources.list \ # use mirror
    && apt-get clean && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    sudo wget curl build-essential cmake \
    libexpat1-dev gettext libz-dev \
    zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libre2-dev libreadline-dev \
    libncurses5-dev libffi-dev libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev \
    openssh-server logrotate rsync python-docutils pkg-config

# fixme: checkinstall is not installed, due to error "Unable to locate package checkinstall".

RUN echo "installing ruby." \
    && wget ${RUBY_DOWNLOAD_RUL} -O /tmp/ruby.tar.gz \
    && mkdir /tmp/ruby-src \
    && tar -xzf /tmp/ruby.tar.gz -C /tmp/ruby-src --strip-components=1 \
    && cd /tmp/ruby-src \
    && ./configure --disable-install-rdoc --enable-shared --prefix=/usr/local/ruby \
    && make -j $(nproc) \
    && make install \
    && cd /tmp \
    && rm -rf /tmp/ruby-src /tmp/ruby.tar.gz \
    && ln -s /usr/local/ruby/bin/* /usr/local/bin/ \
    && ln -s /usr/local/ruby/include/* /usr/local/include/ \
    && ln -s /usr/local/ruby/lib/* /usr/local/lib/ \
    && gem install bundler --version 1.17.3 --no-document

# fixme: we use bundler version 1.17.3, not bundler 2, until "BUNDLED WITH" section in
# https://gitlab.com/gitlab-org/gitaly/blob/master/ruby/Gemfile.lock is updated.


RUN echo "installing go." \
    && wget ${GOLANG_DOWNLOAD_URL} -O /tmp/go.tar.gz \
    && tar -C /usr/local -xzf /tmp/go.tar.gz \
    && rm /tmp/go.tar.gz

RUN echo "installing node." \
    && wget ${NODEJS_DOWNLOAD_URL} -O /tmp/node.tar.xz \
    && mkdir -p /usr/local/node \
    && tar -xf /tmp/node.tar.xz -C /usr/local/node --strip-components=1 \
    && rm /tmp/node.tar.xz \
    && export PATH=/usr/local/node/bin:$PATH \
    && npm install --global yarn

RUN echo "installing libpcre dependency for git." \
    && cd /tmp \
    && wget ${LIBPCRE_DOWNLOAD_URL} -O pcre2.tar.gz \
    && mkdir -p /tmp/pcre2-src  \
    && tar -zxf pcre2.tar.gz -C /tmp/pcre2-src --strip-components=1 \
    && cd pcre2-src \
    && chmod +x configure \
    && ./configure --prefix=/usr/local/ --enable-jit --enable-shared=no --enable-static=yes \
    && make -j $(nproc) && make install \
    && rm -rf /tmp/pcre2.tar.gz /tmp/pcre2-src

RUN echo "installing git." \
    && cd /tmp \ 
    && wget ${GIT_DOWNLOAD_URL} -O git.tar.gz  \
    && mkdir -p /tmp/git-src  \
    && tar -zxf git.tar.gz -C /tmp/git-src --strip-components=1 \
    && cd git-src \
    && chmod +x configure \
    && ./configure --with-libpcre --prefix=/usr/local/git \
    && make all -j $(nproc) && make install \
    && ln -s /usr/local/git/bin/* /usr/bin/  \
    && rm -rf /tmp/git.tar.gz /tmp/git-src


## ac_cv_func_isnan=yes ac_cv_func_isinf=yes
# install charlock_holmes
## error: 'int isinf(double)' conflicts with a previous declaration RUBY_EXTERN int isinf(double);
## see: https://github.com/gliderlabs/docker-alpine/issues/261#issuecomment-285307909 and
## https://github.com/knu/ruby-unf_ext/issues/18.

FROM gitlab-base-packages-builder AS gitlab-base-builder

## todo move some env to ARG
ENV GITLAB_USER="git" \
    GITLAB_HOME="/home/git" \
    RAILS_ENV=production

## nodejs and ruby are installed in /usr/local

ENV GOROOT="/usr/local/go" \
    NODE_HOME="/usr/local/node" \
    YARN_BIN_GITLAB_USER="${GITLAB_HOME}/.yarn/bin"

# sudo resets PATH, along with many other environment variables, for security reasons.
# It doesn't matter what is set in /etc/profile, unless you run sudo -i.
# see https://serverfault.com/questions/11899/how-to-override-a-path-environment-variable-in-sudo
# so, we add PATH to file /etc/profile.
RUN echo "configure git user." \
    && adduser --gecos 'GitLab' ${GITLAB_USER} \
    && passwd -d ${GITLAB_USER} \
    && sudo -HEu ${GITLAB_USER} git config --global core.autocrlf input \
    && sudo -HEu ${GITLAB_USER} git config --global gc.auto 0 \
    && sudo -HEu ${GITLAB_USER} git config --global repack.writeBitmaps true
    # deprecated: echo "\nexport PATH=/usr/local/go/bin:/usr/local/node/bin:~/.yarn/bin:\$PATH" >> /etc/profile \

################################
## image of gitlab-shell-builder
################################
FROM gitlab-base-builder AS gitlab-shell-builder
### docker build --rm -t gitlab-shell-builder .

## version number should better be the same in /home/git/gitlab/GITLAB_SHELL_VERSION
## see files in https://gitlab.com/gitlab-org/gitlab-foss for corresponding gitlab version.
ENV GITLAB_SHELL_INSTALL_DIR="${GITLAB_HOME}/gitlab-shell" \
    GITLAB_SHELL_VERSION_TAG="v13.15.1"
ARG GITLAB_SHELL_DOWNLOAD_URL="https://gitlab.com/gitlab-org/gitlab-shell/-/archive/${GITLAB_SHELL_VERSION_TAG}/gitlab-shell-${GITLAB_SHELL_VERSION_TAG}.tar.gz"

## compiler from: https://github.com/sameersbn/docker-gitlab/blob/master/assets/build/install.sh
## node is in /usr/local/node, and go is in /usr/local/go.
RUN mkdir -p ${GITLAB_SHELL_INSTALL_DIR} \
    && wget ${GITLAB_SHELL_DOWNLOAD_URL} -O /tmp/gitlab-shell.tar.gz \
    && tar -zxf /tmp/gitlab-shell.tar.gz -C ${GITLAB_SHELL_INSTALL_DIR} --strip-components=1 \
    && rm /tmp/gitlab-shell.tar.gz \
    && chown -R ${GITLAB_USER}: ${GITLAB_SHELL_INSTALL_DIR} \
    && cd ${GITLAB_SHELL_INSTALL_DIR} \
    && sudo -u ${GITLAB_USER} -H sh -c " \
    export PATH=${GOROOT}/bin:$PATH; \
    cp config.yml.example config.yml; make setup" \
    && rm -rf ${GITLAB_HOME}/repositories go_build

# remove unused repositories directory created by gitlab-shell install

################################
## image of gitlab-workhorse-builder
################################
FROM gitlab-base-builder AS gitlab-workhorse-builder
### docker build --rm -t gitlab-workhorse-builder .

## version number should better be the same in /home/git/gitlab/GITLAB_WORKHORSE_VERSION
## see files in https://gitlab.com/gitlab-org/gitlab-foss for corresponding gitlab version.
ENV  GITLAB_WORKHORSE_INSTALL_DIR="${GITLAB_HOME}/gitlab-workhorse" \
     GITLAB_WORKHORSE_VERSION_TAG="v8.59.2"
ARG  GITLAB_WORKHORSE_BUILD_DIR="${GITLAB_HOME}/gitlab-workhorse-builder"
# it must be a git repository, or following error will happen: "fatal: Not a git repository (or any of the parent directories): .git"
ARG  GITLAB_WORKHORSE_DOWNLOAD_URL="https://gitlab.com/gitlab-org/gitlab-workhorse.git"

## node is in /usr/local/node, and go is in /usr/local/go.
RUN git clone -q -b ${GITLAB_WORKHORSE_VERSION_TAG} --depth 1 ${GITLAB_WORKHORSE_DOWNLOAD_URL} ${GITLAB_WORKHORSE_BUILD_DIR} \
    && chown -R ${GITLAB_USER}: ${GITLAB_WORKHORSE_BUILD_DIR} \
    && sudo -u ${GITLAB_USER} -H sh -c " \
    cd ${GITLAB_WORKHORSE_BUILD_DIR}; \
    export PATH=${GOROOT}/bin:$PATH; \
    make install PREFIX=${GITLAB_WORKHORSE_INSTALL_DIR} " \
    && rm -rf ${GITLAB_WORKHORSE_BUILD_DIR}

## the binary is located in ${GITLAB_WORKHORSE_INSTALL_DIR}/bin

################################
## image of gitlab-gitaly-builder
################################
FROM gitlab-base-builder AS gitlab-gitaly-builder
### docker build --rm -t gitlab-gitaly-builder .

ENV  GITLAB_GITALY_INSTALL_DIR="${GITLAB_HOME}/gitaly" \
     GITLAB_GITALY_VERSION_TAG="v13.8.7"
ARG  GITLAB_GITALY_BUILD_DIR="${GITLAB_HOME}/gitlab-gitaly-builder"
# it must be a git repository, or following error will happen: "fatal: Not a git repository (or any of the parent directories): .git"
ARG  GITLAB_GITALY_DOWNLOAD_URL="https://gitlab.com/gitlab-org/gitaly.git"

## compiler from: https://github.com/sameersbn/docker-gitlab/blob/master/assets/build/install.sh
## the default PREFIX is /usr/local, so binary will be in /usr/local/bin.
## node in /usr/local/node, and go is in /usr/local/go.
RUN git clone -q -b ${GITLAB_GITALY_VERSION_TAG} --depth 1 ${GITLAB_GITALY_DOWNLOAD_URL} ${GITLAB_GITALY_BUILD_DIR} \
    && mkdir -p ${GITLAB_GITALY_INSTALL_DIR} \
    && chown -R ${GITLAB_USER}: ${GITLAB_GITALY_BUILD_DIR} ${GITLAB_GITALY_INSTALL_DIR} \
    && sudo -u ${GITLAB_USER} -H sh -c " \
    cd ${GITLAB_GITALY_BUILD_DIR}; \
    export PATH=${GOROOT}/bin:$PATH; \
    make install PREFIX=${GITLAB_GITALY_INSTALL_DIR};" \
    && cp -a ${GITLAB_GITALY_BUILD_DIR}/ruby ${GITLAB_GITALY_INSTALL_DIR} \
    && rm -rf ${GITLAB_GITALY_INSTALL_DIR}/ruby/vendor/bundle/ruby/**/cache \
    && rm -rf ${GITLAB_GITALY_BUILD_DIR}

## the binary is located in ${GITLAB_GITALY_INSTALL_DIR}

# && cp -a ${GITLAB_GITALY_BUILD_DIR}/ruby ${GITLAB_GITALY_INSTALL_DIR} \
# && cp -a ${GITLAB_GITALY_BUILD_DIR}/config.toml.example ${GITLAB_GITALY_INSTALL_DIR}/config.toml \
# && rm -rf ${GITLAB_GITALY_INSTALL_DIR}/ruby/vendor/bundle/ruby/**/cache \
# && cp -r ${GITLAB_GITALY_BUILD_DIR}/bin ${GITLAB_GITALY_INSTALL_DIR} \

################################
## image of gitlab-builder
################################
FROM gitlab-base-builder AS gitlab-builder

ENV GITLAB_INSTALL_DIR="${GITLAB_HOME}/gitlab" \
    GITLAB_VERSION=v13.8.7

ARG GITLAB_BUILD_DIR="${GITLAB_HOME}/gitlab-build"
ARG GITLAB_DOWNLOAD_URL="https://gitlab.com/gitlab-org/gitlab-foss.git"
# install postfix

## postgresql-dev: libpq-dev on ubuntu.
##
RUN DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y libpq-dev \
    && git clone -q -b ${GITLAB_VERSION} --depth 1 ${GITLAB_DOWNLOAD_URL} ${GITLAB_BUILD_DIR} \
    && cd ${GITLAB_BUILD_DIR} \
    && chown -R ${GITLAB_USER}: ${GITLAB_BUILD_DIR} \
    && sudo -u ${GITLAB_USER} -H sh -c " \
     export PATH=${GOROOT}/bin:${NODE_HOME}/bin:${YARN_BIN_GITLAB_USER}:$PATH; \
     bundle install -j $(nproc) --deployment --without development test mysql aws kerberos"

# mkdir ln -s /lib/libc.musl-x86_64.so.1 /lib/ld-linux-x86-64.so.2 \

RUN cd ${GITLAB_BUILD_DIR} \
    && sudo -u ${GITLAB_USER} -H sh -c " \
    export PATH=${GOROOT}/bin:${NODE_HOME}/bin:${YARN_BIN_GITLAB_USER}:$PATH; \
    cp ${GITLAB_BUILD_DIR}/config/database.yml.postgresql ${GITLAB_BUILD_DIR}/config/database.yml; \
    cp ${GITLAB_BUILD_DIR}/config/gitlab.yml.example ${GITLAB_BUILD_DIR}/config/gitlab.yml; \
    cp ${GITLAB_BUILD_DIR}/config/resque.yml.example  ${GITLAB_BUILD_DIR}/config/resque.yml; \
    bundle exec rake gettext:compile RAILS_ENV=production; \
    yarn install --production --pure-lockfile ; \
    yarn add ajv@^4.0.0; \
    bundle exec rake gitlab:assets:compile RAILS_ENV=production NODE_ENV=production NODE_OPTIONS='--max_old_space_size=2048';" \
    && rm -rf ${GITLAB_BUILD_DIR}/node_modules

## data copy and clean unnecessary data.
## todo: del vendor/bundle/ruby/2.4.0/cache (60MB, need to known ruby version)
## todo: del ${GITLAB_BUILD_DIR}.
RUN rm -rf ${GITLAB_HOME}/.cache \
    && rm -rf ${GITLAB_BUILD_DIR}/tmp/cache/* ${GITLAB_BUILD_DIR}/.git \
    && mkdir -p ${GITLAB_INSTALL_DIR} \
    && chown -R ${GITLAB_USER}: ${GITLAB_INSTALL_DIR} \
    && cp -a  ${GITLAB_BUILD_DIR}/. ${GITLAB_INSTALL_DIR}/
    # copy from build dir to install dir (including hiden dirs).

################################
## image of genshen/gitlab-ce
################################
###################################################
## the final Docker image genshen/gitlab-ce:latest
###################################################
FROM debian:buster-20200908-slim AS gitlab

LABEL maintainer="genshenchu@gmail.com" \
      description="gitlab images, which includes necessary gitlab components: gitlab-server, gitaly, gitlab-shell, gitlab-workhorse."

ARG LSB_RELEASE="buster"

ENV GITLAB_USER="git" \
    GITLAB_HOME="/home/git" \
    GITLAB_CONFIG_DIR="/etc/gitlab" \
    GITLAB_DATA_DIR="/gitlab/data" \
    GITLAB_PAGES_DATA_DIR="/gitlab/gitlab-pages" \
    GITLAB_CACHE_DIR="/tmp/gitlab" \
    GITLAB_LOG_DIR="/var/log/gitlab" \
    RAILS_ENV=production

# copy ruby with bundle
COPY --chown=root:root --from=gitlab-base-packages-builder /usr/local/ruby /usr/local/ruby/
COPY --chown=root:root --from=gitlab-base-packages-builder /usr/local/git /usr/local/git/

## create a user ans setup env.
# package postgresql-client is not installed.
# libxml2 is needed for db:migrate todo
# zip unzip is used for artifacts extract.
# For libmagic-dev, see https://elementaryos.stackexchange.com/q/4436
RUN adduser --disabled-login --gecos 'GitLab' ${GITLAB_USER} \
    && passwd -d ${GITLAB_USER} \
    && apt-get clean \
    && apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    sudo nodejs gnupg2 yarn ca-certificates wget openssh-server logrotate zip unzip \
    libxml2 libpq5 libicu63 libre2-5 libmagic-dev \
    && echo "deb http://apt.postgresql.org/pub/repos/apt ${LSB_RELEASE}-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
    && apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y postgresql-client-12  \
    && export PATH=/usr/local/ruby/bin:$PATH \
    && mkdir -p /usr/local/bin /usr/local/include /usr/local/lib /usr/local/libexec /usr/local/share  \
    && ln -s /usr/local/ruby/bin/* /usr/local/bin/ \
    && ln -s /usr/local/ruby/include/* /usr/local/include/ \
    && ln -s /usr/local/ruby/lib/* /usr/local/lib/ \
    && ln -s /usr/local/git/bin/* /usr/bin/  \
    && ln -s /usr/local/git/libexec/* /usr/local/libexec/ \
    && ln -s /usr/local/git/share/* /usr/local/share/

# fixme: we use bundler version 1.17.3, not bundler 2, until "BUNDLED WITH" section in
# https://gitlab.com/gitlab-org/gitaly/blob/master/ruby/Gemfile.lock is updated.

## define gitlab components install directories.
ENV GIT_REPOSITORIES_DIR="${GITLAB_HOME}/repositories" \
    GITLAB_RUNTIME_DIR="${GITLAB_CACHE_DIR}/runtime" \
    GITLAB_DIR="${GITLAB_HOME}/gitlab" \
    GITALY_DIR="${GITLAB_HOME}/gitaly" \
    GITLAB_SHELL_DIR="${GITLAB_HOME}/gitlab-shell" \
    GITLAB_WORKHORSE_DIR="${GITLAB_HOME}/gitlab-workhorse" \
    WORKHORSE_LISTEN_NETWORK="tcp"

# note: replace ${GITLAB_USER} as git.
COPY --chown=git:git --from=gitlab-shell-builder ${GITLAB_SHELL_DIR} ${GITLAB_SHELL_DIR}/
COPY --chown=git:git --from=gitlab-workhorse-builder ${GITLAB_WORKHORSE_DIR} ${GITLAB_WORKHORSE_DIR}/
COPY --chown=git:git --from=gitlab-gitaly-builder ${GITALY_DIR} ${GITALY_DIR}/
COPY --chown=git:git --from=gitlab-builder ${GITLAB_DIR} ${GITLAB_DIR}/

# https://github.com/ochinchina/supervisord
# COPY --from=ochinchina/supervisord:latest /usr/local/bin/supervisord

COPY create.sh entrypoint.sh /usr/local/sbin/
RUN chmod +x /usr/local/sbin/create.sh /usr/local/sbin/entrypoint.sh \
    && bash /usr/local/sbin/create.sh \
    && rm /usr/local/sbin/create.sh

EXPOSE 22/tcp 8181/tcp
VOLUME ["${GITLAB_DATA_DIR}", "${GITLAB_CONFIG_DIR}", "${GITLAB_LOG_DIR}"]

ENTRYPOINT ["/usr/local/sbin/entrypoint.sh"]

CMD ["start"]

## todo: backup schedule